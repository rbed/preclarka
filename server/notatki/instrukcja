STRUKTURA KATALOGÓW
1. w kat / aplikacji npm init
2. w /packages.js dodać 
  "dependencies": {
      "concurrently": "^4.1.2",
      "nodemon": "^1.19.4"
   }
3. w / npm install
4. stworzenie katalogów /serwer i /client
5. w /server npm init
6. w /server/packages.js dodanie
  "dependencies": {
    "body-parser": "^1.19.0",
    "chalk": "^2.4.2",
    "cookie-parser": "^1.4.4",
    "cores": "^0.8.5",
    "crypto": "^1.0.1",
    "debug": "~2.6.9",
    "ejs": "~2.5.7",
    "errorhandler": "^1.5.1",
    "express": "~4.16.0",
    "express-session": "^1.17.0",
    "figures": "^3.1.0",
    "http-errors": "~1.6.2",
    "http-status-codes": "^1.4.0",
    "is-empty": "^1.2.0",
    "jade": "^1.11.0",
    "jsonwebtoken": "^8.5.1",
    "log-symbols": "^3.0.0",
    "mongodb": "^3.4.1",
    "mongoose": "^5.8.3",
    "mongoose-autopopulate": "^0.9.1",
    "mongoose-unique-validator": "^2.0.3",
    "morgan": "~1.9.0",
    "nodemon": "^1.19.4",
    "ora": "^3.4.0",
    "passport": "^0.4.1",
    "passport-jwt": "^4.0.0",
    "passport-local": "^1.0.0",
    "validator": "^11.1.0"
  }
7. w /server npm install
8. stworzyć katalog dla bazy danych mk /server/data/bd ----------DB
9. w /package.js zdefiniować start i stop
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "prestart": "cd server  && mongod --dbpath data/db/ --fork --logpath ./data/db_start.log",
    "start": "cd server && npm start",
    "stop": "cd server && mongo admin --eval 'db.shutdownServer()'  && killall mongod"
10. terminal: mongo
11. > use nazwa-bazy-danych 
12. db.new_collection.insert({ some_key: "some_value" })
13. ustawienie bazy danych. W /server/app.js dodać
  mongoose
   .connect('mongodb://localhost:27017/preclarkadb'...
14. w /server/models tworzymy plik Users.js (model usera)
15. w Users.js tworzymy schemat danych "UsersSchema"
16. na końcu Users.js rejestrujemy model 
  module.exports = mongoose.model('Users', UsersSchema); 
17. w app.js import modeli: require('./models/Users')
  (wkleić nad: var indexRouter = require('./routes/index');)
18. w /server/routes/users.js definiowanie odpowidzi na zapytania

MODELE I mongo
kończymy definiować reszte modeli (na razie pola, bez metod)
w routes/users zmieniamy funkcje na asynchroniczne, zeby zwracał wyniki
w routes/users dodajemy metody get, post, put, delete



PYTANIA
- czy moja baza danych ma jakiś login albo hasło? >> moe (mongodb atlas)
- dlaczego nie są zwracane dane z bazy danych (users) kiedy korzystam z aplikacji a są zwracane kiedy sprawdzam bezpośrednio w bazie danych?
>>> chodizł o o asynchronicznosc
- próba usunięcia nazwy użytkownika z Seowca rzyga błędem
- w aplikacji Rafał ma usera i employee i oni też mają np dwa adresy email

TODO
- rest api dla wszystkich modeli
- wtyczka do todo



















Koncepcja jest taka
let x = await Model.find().exec()
Albo 
let x = Model.find().then(doc =>{return doc})
Praktycznie to samo
O tyle ze obsluga się zmienia
W przypadku nr 1 musisz zrobic blok try catch
A w nr 2. Zrobic .catch(e=>{ return ę })
I pamiętać ze błąd będzie przypisany do 



ZABIJANIE PROCESU

sprawdzenia numeru procesu (PID - process id)
sudo lsof -i:<PORT_NO>
albo
lsof -i tcp:3000
zabicie
sudo kill <PID>